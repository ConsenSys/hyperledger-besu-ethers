@startuml
skinparam maxMessageSize 350 

participant dApp
participant Pantheon
participant Orion

note left of Pantheon #aqua: JSON-RPC

' reatePrivacyGroup
dApp -> Pantheon: priv_createPrivacyGroup(name, desc, members[])
activate Pantheon
note left of Orion #aqua: REST
Pantheon -> Orion: createPrivacyGroup(Orion pub key, name, desc, members[])
activate Orion
return privacyGroupId, type = PANTHEON
return privacyGroupId

' getTransactionCount
dApp -> Pantheon: priv_getTransactionCount(signer address, privacyGroupId)
activate Pantheon
return quantity
note left: nonce = quantity

dApp->dApp: RLP encode(data, nonce, privateFrom = Orion pub key, privateFor = privacyGroupId, restriction = restricted)
note left
    data is rlp encoded
    contract deployment
    or call
end note
dApp->dApp: sign(rlp encoded private transaction, signer private key)

' sendRawTransaction
dApp -> Pantheon: eea_sendRawTransaction(rlp encoded signed private transaction)
activate Pantheon
Pantheon -> Pantheon: parse(rlp encoded private transaction)
Pantheon -> Pantheon: validate(private transaction)
Pantheon -> Pantheon: base64 encode(rlp encoded signed private transaction)
Pantheon -> Orion: send(payload = base64 encoded private transaction, from = Orion pub key, privacyGroupId)
activate Orion
loop asynchronous for each member
Orion -> Orion: encrypt(member Orion public key, payload)
Orion -> Orion: sendToMember(member Orion public key, encrypted payload)
end
return private transaction key
Pantheon -> Pantheon: sign public transaction(node private key, data = private tx hash)
Pantheon -> Pantheon: add mempool(signed public transaction)
return public tx hash

Pantheon -> Pantheon: public transaction mined

' getTransactionByHash
dApp -> Pantheon: eth_getTransactionByHash(public tx hash)
activate Pantheon
return public market transaction
note left
    private tx hash =
    input field of
    public marker
    transaction
end note

@enduml